#pragma once
#include "constants.h"
#include <functional>
#include <memory>
#include <mutex>
#include <string>
#include <thread>

#include "Client.h"
#include "NetworkPlatform.h"

#ifdef _WIN32
#include <winsock2.h>
#include <ws2tcpip.h>
#else
#include <netinet/in.h>
#include <sys/socket.h>
#endif

/**
 * @class NetworkManager
 * @brief A class that manages networking and socket listeners.
 *
 * This class manages the setup, control of network sockets and listeners.
 */

class NetworkManager
{
  public:
    /* ----------------
     * Constructors
     * ----------------
     */
    NetworkManager(int port, std::string ip_address = ANY_IP);

    /* ----------------
     * Public methods
     * ----------------
     */

    /**
     * @brief Creates the network socket
     */
    void setupSocket();

    /**
     * @brief Closes the socket
     */
    void closeSocket();

    /**
     * @brief Starts the socket listener
     */
    void startListening(const std::function<void(Client &, char *)> &callback, bool async = true);

    /*
     * @brief Adds a new client to the clients list. Thread safe
     */
    Client *addClient(uint64_t id, int port, std::string ipAddress, SOCKET sock);

    std::string getIp() const;
    int getPort() const;

  private:
    /* ----------------
     * Private attributes
     * ----------------
     */

#ifdef _WIN32
    struct AcceptContext
    {
        OVERLAPPED overlapped;
        SOCKET client_socket;
        char rcv_buffer[MAX_BUFFER_LENGHT_FOR_REQUESTS];
    };

    AcceptContext *m_accept_ctx;
#endif
    std::string m_ip_address;
    sockaddr_in m_server_address;
    int m_port;
    std::thread m_listener_thread;
    SOCKET_TYPE m_server_socket;

    std::atomic<uint64_t> AUTOGENERATED_ID;
    std::atomic<bool> m_listening;

    std::mutex m_mtx;

    std::unordered_map<uint64_t, std::unique_ptr<Client>> m_client_list;

    /* ----------------
     * Private methdos
     * ----------------
     */
};
